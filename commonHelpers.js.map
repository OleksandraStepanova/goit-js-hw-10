{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nlet userSelectedDate = 0;\n\nconst inputRef = document.querySelector('#datetime-picker');\n\nconst buttonRef = document.querySelector('button');\nbuttonRef.disabled = true;\n\nconst daysRef = document.querySelector('[data-days]');\nconst hoursRef = document.querySelector('[data-hours]');\nconst minutesRef = document.querySelector('[data-minutes]');\nconst secondsRef = document.querySelector('[data-seconds]');\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n      if (selectedDates[0] > Date.now()) {\n          userSelectedDate = selectedDates[0];\n          buttonRef.disabled = false;\n      }\n      else {\n          iziToast.show({\n              onClosed(){},\n              message: \"Please choose a date in the future\",\n              color: 'red',\n              position: 'topRight',\n              timeout: 5000,              \n          })\n          buttonRef.disabled = true;\n      }      \n  },\n};\n\nflatpickr('#datetime-picker', options)\n\nbuttonRef.addEventListener('click', () => {\n    const intervalId = setInterval(() => {\n      \n    const currentTime = Date.now();\n    const diff = userSelectedDate - currentTime;\n    const time = convertMs(diff);\n        \n    daysRef.textContent = time.days.toString().padStart(2, '0');\n    hoursRef.textContent = time.hours.toString().padStart(2, '0');\n    minutesRef.textContent = time.minutes.toString().padStart(2, '0');\n    secondsRef.textContent = time.seconds.toString().padStart(2, '0');\n        \n    inputRef.disabled = true;\n    buttonRef.disabled = true;\n        \n    if (diff < 1000) clearInterval(intervalId);\n        \n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n"],"names":["userSelectedDate","inputRef","buttonRef","daysRef","hoursRef","minutesRef","secondsRef","options","selectedDates","iziToast","flatpickr","intervalId","currentTime","diff","time","convertMs","ms","days","hours","minutes","seconds"],"mappings":"+IAKA,IAAIA,EAAmB,EAEvB,MAAMC,EAAW,SAAS,cAAc,kBAAkB,EAEpDC,EAAY,SAAS,cAAc,QAAQ,EACjDA,EAAU,SAAW,GAErB,MAAMC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAa,SAAS,cAAc,gBAAgB,EACpDC,EAAa,SAAS,cAAc,gBAAgB,EAEpDC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAI,KAAK,IAAG,GAC3BR,EAAmBQ,EAAc,CAAC,EAClCN,EAAU,SAAW,KAGrBO,EAAS,KAAK,CACV,UAAU,CAAE,EACZ,QAAS,qCACT,MAAO,MACP,SAAU,WACV,QAAS,GACvB,CAAW,EACDP,EAAU,SAAW,GAE5B,CACH,EAEAQ,EAAU,mBAAoBH,CAAO,EAErCL,EAAU,iBAAiB,QAAS,IAAM,CACtC,MAAMS,EAAa,YAAY,IAAM,CAErC,MAAMC,EAAc,KAAK,MACnBC,EAAOb,EAAmBY,EAC1BE,EAAOC,EAAUF,CAAI,EAE3BV,EAAQ,YAAcW,EAAK,KAAK,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC1DV,EAAS,YAAcU,EAAK,MAAM,SAAQ,EAAG,SAAS,EAAG,GAAG,EAC5DT,EAAW,YAAcS,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAChER,EAAW,YAAcQ,EAAK,QAAQ,SAAQ,EAAG,SAAS,EAAG,GAAG,EAEhEb,EAAS,SAAW,GACpBC,EAAU,SAAW,GAEjBW,EAAO,KAAM,cAAcF,CAAU,CAE1C,EAAE,GAAI,CACT,CAAC,EAED,SAASI,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}